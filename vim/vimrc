call plug#begin()
Plug 'tpope/vim-sensible'
Plug 'christoomey/vim-tmux-navigator'
Plug 'FelikZ/ctrlp-py-matcher'
Plug 'kien/ctrlp.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-vinegar'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/syntastic'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'

" Syntax
Plug 'juvenn/mustache.vim'
Plug 'kchmck/vim-coffee-script'
Plug 'nono/vim-handlebars'
Plug 'mitsuhiko/vim-jinja'
Plug 'hdima/python-syntax'

" Color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'morhetz/gruvbox'

call plug#end()

" basic settings
set number
set ruler
set exrc        " enable per-directory .vimrc files
set secure      " disable unsafe commands in local .vimrc files

" General FileType settings ------------------ {{{
augroup FTOptions
    autocmd!
    autocmd FileType netrw nnoremap q :bp\|bd #<CR>
    autocmd FileType * if exists("+omnifunc") && &omnifunc == "" 
	\ | setlocal omnifunc=syntaxcomplete#Complete | endif
    autocmd FileType * if exists("+completefunc") && &completefunc == ""
	\ | setlocal completefunc=syntaxcomplete#Complete | endif
augroup END
" }}}

" Vimscript file settings -------------------- {{{
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
" }}}

" ctrlp -------------------------------------- {{{
" Swap enter and ctrl+t in ctrlp window.
" Enter will open in a new tab, ctrl+t will open in same window.
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>'],
    \ }

let g:ctrlp_custom_ignore = {
    \ 'dir': '\v[\/](doc\/build|bower_components)\/.*',
    \ 'file': '\v\.(pyc)$',
    \ }

let g:ctrlp_user_command = [
    \ '.git/',
    \ 'git ls-files --cached --exclude-standard --others %s'
    \ ]

let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" }}}

" airline {{{
"let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1 
" }}}

" syntastic ---------------------------------- {{{
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_loc_list_height = 10
let g:syntastic_mode_map = {
        \ "mode": "passive",
        \ "active_filetypes": [],
        \ "passive_filetypes": [] }

" }}}

" nerdtree ---------------------------------- {{{
let NERDTreeMinimalUI=1
let NERDTreeQuitOnOpen=1
let NERDTreeRespectWildIgnore=1
let NERDTreeIgnore=['__pycache__', '\.pyc$', '\~$']

map - :call NERDTreeToggleInCurDir()<CR>
function! NERDTreeToggleInCurDir()
  " If NERDTree is open in the current buffer
  if (exists("t:NERDTreeBufName") && bufwinnr(t:NERDTreeBufName) != -1)
    exe ":NERDTreeClose"
  else
    exe ":NERDTreeFind"
  endif
endfunction
" }}}

" gui settings
colorscheme solarized
" This is necessary over SSH where COLORFGBG doesn't get passed.
set background=dark

"" Include local customizations.
if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

" vim: set filetype=vim
